#!/usr/bin/env python

import argparse
import os
import re


TEMPLATE = '''; docformat = 'rst'

function {name}_ut::init, _extra=e
  compile_opt strictarr

  if (~self->{parent_class}::init(_extra=e)) then return, 0

  {testing_procedures}
  {testing_functions}

  return, 1
end


pro {name}_ut__define
  compile_opt strictarr

  define = {{{name}_ut, inherits {parent_class}}}
end'''


def parse_file(filename):
    with open(filename, 'r') as f:
        text = f.read()

    pro_pattern = '^\s*pro\s+([$a-zA-Z][$\w:]*)'
    function_pattern = '^\s*function\s+([$a-zA-Z][$\w:]*)'
    pro_re = re.compile(pro_pattern)
    function_re = re.compile(function_pattern)

    all_pro = re.findall(pro_pattern, text, flags=re.MULTILINE)
    all_function = re.findall(function_pattern, text, flags=re.MULTILINE)

    return all_pro, all_function


def determine_name(filename):
    basename = os.path.basename(filename)

    # remove extension
    dotpos = basename.rfind('.')
    if dotpos >= 0:
        basename = basename[:dotpos]

    definepos = basename.rfind('__define')
    if definepos >= 0:
        basename = basename[:definepos]

    return basename


def output_names(routines):
    if len(routines[0]) > 0:
        print('Procedures:')
        print('  ' + '\n  '.join(routines[0]))

    if len(routines[1]) > 0:
        print('Functions:')
        print('  ' + '\n  '.join(routines[1]))


def output_template(name, routines, parent_class):
    pro_template = 'self->addTestingRoutine, {names}'
    function_template = 'self->addTestingRoutine, {names}, $\n{indent}/is_function'

    if len(routines[0]) == 0:
        testing_procedures = ''        
    else:
        names = [f"'{n}'" for n in routines[0]]
        names = '[' + (', $\n' + 28 * ' ').join(names) + ']'
        testing_procedures = pro_template.format(names=names)

    if len(routines[1]) == 0:
        testing_functions = ''
    else:
        names = [f"'{n}'" for n in routines[1]]
        names = '[' + (', $\n' + 28 * ' ').join(names) + ']'
        testing_functions = function_template.format(names=names, indent=27 * ' ')

    print(TEMPLATE.format(name=name,
                          parent_class=parent_class,
                          testing_procedures=testing_procedures,
                          testing_functions=testing_functions))


def main():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('filename', help='filename of file to test')
    parser.add_argument('--parent-class',
                        type=str,
                        default='MGutTestCase',
                        help='parent class; default is MGutTestCase')
    parser.add_argument('--names',
                        help='set to just print routines in file',
                        action='store_true')
    args = parser.parse_args()

    routines = parse_file(args.filename)

    if args.names:
        output_names(routines)
    else:
        name = determine_name(args.filename)
        output_template(name, routines, args.parent_class)


if __name__ == '__main__':
    main()
